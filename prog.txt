1. Write a program that accept a number from user and check it is prime or not.
=> n=int(input("enter the value"))
   count=0
   for i in range(2,(n//2+1)):
   	if(n%i==0):
   		count=count+1
   		break
   if(count==0 and n!=1):
   	print ("is prime ")
   else:	
 	print("is not prime ")
  

  o/p:-[exam@localhost ~]$ python3 prime.py
       enter the value9
       is not prime 
       [exam@localhost ~]$ python3 prime.py
       enter the value3
       is prime 
    












2. Write a program that accept a number from user and check it is palindrome or not.
=>n=int(input("Enter number:"))
  t=n
  r=0
  while(n>0):
      d=n%10
      r=r*10+d
      n=n//10
  if(t==r):
      print("The number is a palindrome!")
  else:
      print("The number isn't a palindrome!")

  o/p:-[exam@localhost ~]$ python3 pali.py
       Enter number:23
       The number isn't a palindrome!
       [exam@localhost ~]$ python3 pali.py
       Enter number:232
       The number is a palindrome!











3. Write a program that accept a number from user and check it is perfect or not.
=>
  def check(num):
	sum = 0
	for i in range(1,num-1):
		if num % i == 0:
			sum += i 
	if sum == num:
		 print(" is perfect number")
	else:
		 print(" is not a perfect number")
  number = int(input("Enter the number: "))
  print(check(number))



  o/p:-[exam@localhost ~]$ python3 perfect.py
       Enter the number: 7
       is not a perfect number
       [exam@localhost ~]$ python3 perfect.py
       Enter the number: 6           
       is perfect number









4. Write a program that accept a number from user and calculate factorial of it.
=>
  def fact(n):
	f=1
	while(n>0):
		f=f*n
		n=n-1
	return f
  n1=int(input("enter the no=>"))
  print(fact(n1))

  
  o/p:-[exam@localhost ~]$ python3 fact.py
       enter the no=>5
       120
















5. Write a program that accept two number from user and print all prime numbers within it.
=>
first = int(input("Enter the first number: "))
second = int(input("Enter the second number: "))

print(f"Prime numbers between {first} and {second} are:")

for num in range(first, second + 1):
   if num > 1:
       for i in range(2, num):
           if (num % i) == 0:
               break
       else:
           print(num)

o/p:-[exam@localhost ~]$ python3 5allprime.py
Enter the first number: 1
Enter the second number: 10
Prime numbers between 1 and 10 are:
2
3
5
7








6. Write a program that accept two number from user and print all palindrome numbers within it.
=>
def isPalindrome(n: int):
    rev = 0
    i = n
    while i > 0:
        rev = rev * 10 + i % 10
        i //= 10

    if n == rev:
        return True
    else:
        return False

def countPal(minn: int, maxx: int):
    for i in range(minn, maxx + 1):
        if isPalindrome(i):
            print(i, end = " ")

first = int(input("Enter the first number: "))
second = int(input("Enter the second number: "))

countPal(first,second)


o/p:-[exam@localhost ~]$ python3 pali2.py
Enter the first number: 1
Enter the second number: 20
1 2 3 4 5 6 7 8 9 11 



7. Write a program that accept two number from user and print all perfect numbers within it.
=>
  def check(n1,n2):
	perfect_number = []
	for i in range(n1, n2+1):
		sum = 0
		for j in range(1,i):
			if i % j == 0:
				sum += j
		if sum == i:
			perfect_number.append(i)
	return perfect_number

  l = check(1,1000)
  print(l)


  o/p:-[exam@localhost ~]$ python3 perfect1.py
       [6, 28, 496]











8. Write a program that accept two numbers and find GCD of it.
=>
  def hcf(a, b):
    if(b == 0):
        return a
    else:
        return hcf(b, a % b)
  a = 60
  b = 48
  print("The gcd of 60 and 48 is : ", end="")
  print(hcf(60, 48))


  o/p:-[exam@localhost ~]$ python3 gcd.py
       The gcd of 60 and 48 is : 12

















9. Write a program that accept two numbers and find LCM of it.
=>
def findLeastCM(a, b):
    if(a > b):
        maximum = a
    else:
        maximum = b

    while(True):
        if(maximum % a == 0 and maximum % b == 0):
            Val = maximum
            break
        maximum = maximum + 1
    return Val

num1 = int(input(" Please Enter the First : "))
num2 = int(input(" Please Enter the Second : "))
Val = findLeastCM(num1, num2)
print(f"\n Least Common Multiple of {num1} and {num2} = {Val}")


o/p:-[exam@localhost ~]$ python3 9.py
 Please Enter the First : 15
 Please Enter the Second : 20

 Least Common Multiple of 15 and 20 = 60




10. Write a recursive program to calculate factorial of number

def calculate_factorial(number:int):
    if number == 0 or number == 1:
        return 1
    else:
        return number * calculate_factorial(number - 1)
        
number = int(input("Enter the number: "))

print(f"Factorial of {number} is {calculate_factorial(number)}")

o/p:-[exam@localhost ~]$ python3 10.py
Enter the number: 4
Factorial of 4 is 24
















11. Write a program tind root of quadratic equation.
=>
  import math
  a = int(input("Enter the value of a: "))
  b = int(input("Enter the value of b: "))
  c = int(input("Enter the value of c: "))
  s = (b ** 2) - (4 * (a * c))
  if s > 0:
    x = (-(b) + math.sqrt(s))/ (2 * a)
    y = (-(b) - math.sqrt(s))/ (2 * a)
    print(f"X: {x:.3f}, y:{y:.3f}")
  elif s == 0:
    x = (-(b) + math.sqrt(s)) / (2*a)
    print(x)
  else:
    print("Roots are imaginary")
  


  o/p:- [exam@localhost ~]$ python3 qeq.py
        Enter the value of a: 3
        Enter the value of b: 5
        Enter the value of c: 2
        X: -0.667, y:-1.000







12. Write a program for Fibonacci series.
=> 
   num = 10
   n1 = 0
   n2 = 1
   print("Fibonacci Series:", n1, n2, end=" ")
   for i in range(2, num):
      n3 = n1 + n2
      n1 = n2
      n2 = n3
      print(n3, end=" ")
   print()

 o/p:-[exam@localhost ~]$ python3 fs.py
      Fibonacci Series: 0 1 1 2 3 5 8 13 21 34 
















13. Write a Program for sine series
=>
import math
def sin(x,n):
    sine = 0
    for i in range(n):
        sign = (-1)**i
        pi=22/7
        y=x*(pi/180)
        sine = sine + ((y**(2.0*i+1))/math.factorial(2*i+1))*sign
    return sine
x=int(input("Enter the value of x in degrees:"))
n=int(input("Enter the number of terms:"))
print(round(sin(x,n),2))

o/p:-[exam@localhost ~]$ python3 13.py
Enter the value of x in degrees:45
Enter the number of terms:4
0.71













14. Write a program for cosine series.
=>
import math
def cosine(x,n):
    cosx = 1
    sign = -1
    for i in range(2, n, 2):
        pi=22/7
        y=x*(pi/180)
        cosx = cosx + (sign*(y**i))/math.factorial(i)
        sign = -sign
    return cosx
x=int(input("Enter the value of x in degrees:"))
n=int(input("Enter the number of terms:"))
print(round(cosine(x,n),2))


o/p:-Enter the value of x in degrees:45
Enter the number of terms:1
1










15. Write a program that accept a number from user convert it from decimal to octal.
=> n=int(input("enter the no"))
   d=0 
   p=0
   while(n>0):
 	r=n%8
	n=n//8
	d=d+r*pow(10,p)
	p=p+1
   print("octal",d)

   o/p:-[exam@localhost ~]$ python3 octal.py
        enter the no19
        octal 23

















16. Write a program that accept a number from user convert it from octal to decimal.
=> n=int(input("enter the no"))
   d=0
   p=0
   while(n>0):
	r=n%10
	n=n//10
	d=d+r*pow(8,p)
	p=p+1
   print("decimal",d)

  o/p:-[exam@localhost ~]$ python3 octal.py
       enter the no23
       decimal 19

















17. Write a program that accept a number from user convert it from decimal to Hexadecimal.
=> d={0:"0",1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",10:"A",11:"B",12:"C",13:"D",14:"E",15:"F"}
   n=int(input("enter dec no.=>"))
   str1=""
   while n>0:
     r=n%16
     str1=d[r]+str1
     n=n//16
   print("hexadecimal=>",str1)

  o/p:-[exam@localhost]$ python3 hex.py
       enter dec no.=>125
       hexadecimal=> 7D


















18. Write a program that accept a number from user convert it from Hexadecimal to decimal.
=>
   d={"0":0,"1":1,"2":2,"3":3,"4":4,"5":5,"6":6,"7":7,"8":8,"9":9,"A":10,"B":11,"C":12,"D":13,"E":14,"F":15}
   n=input("enter hex no.=>")
   print(n)
   de=0
   p=0
   for i in reversed(n):
       de=de+(d[i]*(16**p))
       p=p+1
   print("decimal=>",de)

  o/p:-[exam@localhost]$ python3 dectohex.py
       enter hex no.=>7D
       7D
       decdimal=> 125













19. Write a program to find transpose of matrix.
=> 
  r=int(input("enter the no. of row"))
  c=int(input("enter the no of col"))
  m1=[]
  print("enter the 1st matrix=>")
  for i in range(0,r):
	r1=[]
	for j in range(0,c):
		e=int(input("enter etc=>"))
		r1.append(e)
	m1.append(r1)
	print(m1[i][j],end="")
  r2=c
  c1=r
  m2=[]
  for i in range(0,c):
	r1=[]
	for j in range(0,r):
		r1.append(m1[j][i])
	m2.append(r1)
  print("result matrix x=>")
  for i in range(0,r2):
	print("")
	for j in range(0,c1):
		print(m2[i][j],end="")


 o/p:-[exam@localhost ~]$ python3 tmatrix.py
      enter the no. of row3
      enter the no of col3
      enter the 1st matrix=>
      enter etc=>1
      enter etc=>2
      enter etc=>3
      enter etc=>4
      enter etc=>5
      enter etc=>6
      enter etc=>7
      enter etc=>8
      enter etc=>9
      result matrix x=>

      147
      258
      369
















20. Write a program that perform addition of two matrice
=>
rows = int(input("Enter the number of rows: "))
cols = int(input("Enter the number of cols: "))
m1 = []
for i in range(rows):
    r = []
    for j in range(cols):
        element = int(input("Enter the element: "))
        r.append(element)

    m1.append(r) 

rows_2 = int(input("Enter the number of rows for second matrix: "))
cols_2 = int(input("Enter the number of cols for second matrix: "))
m2 = []
for i in range(rows_2):
    r2 = []
    for j in range(cols_2):
        element = int(input("Enter the element: "))
        r2.append(element)

    m2.append(r2) 

if rows == rows_2 and cols == cols_2:
    m3 = []
    for i in range(rows):
        add_matrix = []
        for j in range(cols):
            a = m1[i][j] + m2[i][j]
            add_matrix.append(a)
        m3.append(add_matrix)

    for i in range(rows):
        for j in range(cols):
            print(m3[i][j],end=" ")
        print("\n")
        
else:
    print("the addition is not a possible because the rows and cols of the 2 matrix is not same")


o/p:-[exam@localhost ~]$ python3 20.py
Enter the number of rows: 2
Enter the number of cols: 2
Enter the element: 1
Enter the element: 2
Enter the element: 3
Enter the element: 4
Enter the number of rows for second matrix: 2
Enter the number of cols for second matrix: 2
Enter the element: 1
Enter the element: 2
Enter the element: 3
Enter the element: 4 
2 4 

6 8 





21. Write a program that perform multiplication of two matrices
=> r1=int(input("enter the no. of row"))
   c1=int(input("enter the no of col"))
   m1=[]
   print("enter the 1st matrix=>")
   for i in range(0,r1):
	   r=[]
	   for j in range(0,c1):
		   e=int(input("enter etc=>"))
		   r.append(e)
	   m1.append(r)
   r2=int(input("enter the no. of row"))
   c2=int(input("enter the no of col"))
   m2=[]
   print("enter the 2st matrix=>")
   for i in range(0,r2):
           r=[]
	   for j in range(0,c2):
		   e=int(input("enter etc=>"))
		   r.append(e)
	   m2.append(r)
   if(c1==r2 and c2==r1):
    	   for i in range(len(m1)):	
		   for j in range(len(m2[0])):
			   for k in range(len(m2)):
				   e[i][j]=e+m1[i][k]*m2[k][j]
				   r.append(e[i][j])
		   m3.append(r)
	   print("result is =>")
	   print(m3[i][j],end="")
   else:
	   print("multi not possible")

  o/p:-[exam@localhost ~]$ python3 matrix.py
       enter the no. of row2
       enter the no of col2
       enter the 1st matrix=>
       enter etc=>3
       enter etc=>7
       enter etc=>4
       enter etc=>9
       enter the no. of row2
       enter the no of col2
       enter the 2st matrix=>
       enter etc=>6
       enter etc=>2
       enter etc=>5
       enter etc=>8
       result is=>
        
         53 62
         69 80


     






22. Write a program to show use of lambda function.
=>
a = int(input("Enter the number: "))
b = int(input("Enter the second number: "))
# Addition
c = lambda a,b:a+b
print(f"Addition: {c(a,b)}")

# Subtraction
sub = lambda a,b:a-b
print(f"Subtraction: {sub(a,b)}")
# Multiplication

mul = lambda a,b: a*b
print(f"Multiplication: {mul(a,b)}")

# Division
div = lambda a,b: a/b
print(f"Division: {div(a,b)}")


o/p:-[exam@localhost ~]$ python3 22.py
Enter the number: 4
Enter the second number: 20
Addition: 24
Subtraction: -16
Multiplication: 80
Division: 0.2





23. Write a program to show operator overloading using python
=>
class complex:
    
    def __init__(self, r, i):
        self.r = r
        self.i = i
    
    def __add__(self,othr):
        return self.r + othr.r, self.i + othr.i

    def __sub__(self,othr):
        return self.r - othr.r, self.i - othr.i
c1 = complex(3,4)
c2 = complex(5,6)

print(c1 + c2)
print(c1 - c2)


o/p:-[exam@localhost ~]$ python3 23.py
(8, 10)
(-2, -2)






24. Write a program for BFS.
=>
graph = {
    'A':['B','C'],
    'B':['D','E'],
    'C':['F','G'],
    'D':[],
    'E':[],
    'F':['H','I'],
    'G':[],
    'H':[],
    'I':[]
}
graph2 = {
    '1':['2','4'],
    '2':['1','3'],
    '3':['2','5','6'],
    '4':['1','5'],
    '5':['3','4','6'],
    '6':['3','5']
}
graph3 = {
    '1':['2','4'],
    '2':['3','4','5'],
    '3':['2','5'],
    '4':['2','5'],
    '5':['2','3','4']
}
visited = []
que = []
def bfs(graph, visited, node):
    visited.append(node)
    que.append(node)
    while que:
        m = que.pop(0)
        print(m, end=' ')
        for neigh in graph[m]:
            if neigh not in visited:
                visited.append(neigh)
                que.append(neigh)
print("BFS transvers: ")
bfs(graph,visited,'A')


o/p:-[exam@localhost ~]$ python3 24.py
BFS transvers: 
A B C D E F G H I















25. Write a program for DFS.
=>
graph = {
    'A':['B','C'],
    'B':['D','E'],
    'C':['F','G'],
    'D':[],
    'E':[],
    'F':['H','I'],
    'G':[],
    'H':[],
    'I':[]
}
graph2 = {
    '1':['2','4'],
    '2':['1','3'],
    '3':['2','5','6'],
    '4':['1','5'],
    '5':['3','4','6'],
    '6':['3','5']
}
graph3 = {
    '1':['2','4'],
    '2':['3','4','5'],
    '3':['2','5'],
    '4':['2','5'],
    '5':['2','3','4']
}

visited = set()
def dfs(graph,visited,node):
    if node not in visited:
        print(node, end=' ')
        visited.add(node)
        for neigh in graph[node]:
            dfs(graph,visited,neigh)
    

print("DFS transvers: ")
dfs(graph3,visited,'1')


o/p:-[exam@localhost ~]$ python3 25.py
DFS transvers: 
1 2 3 5 4

















26. Write a program to demonstrate use of list functions.

# To create list
list1 = [1,2,3,4]
print("List: ", list1)

# Convert into list 
name = "HvDesai"
list2 = list(name)
print(f"{name} converted into list : {list2}")

# get length of the list using len() function
list3 = [1,3,4,5,6,7,8]
print(f"Length of the list: {len(list3)}")

# check the type of the list using type() function
print(f"Type of the list: {type(list3)}")

# A list with strings, integers and boolean values:
list4 = [1,3, 'name', True]

list1 = ["Amit", "Tejas", "Sahil", "Yash"]
# Access Items
print(list1[2]) # O/p = Sahil

# Adding element in list using append()

list1.append("Avi")
print(list1)

# Removing last element from the list
list1.pop()
print(list1)

# To insert a list item at a specified index, use the insert() method.
list1.insert(2, "Sam")
print(list1)

# The remove() method removes the specified item.

list1.remove("Sam")
print(list1)

# Sort the list

list1 = [4,1,2,9,3]
list1.sort()
print(list1)
  

o/p:-[exam@localhost ~]$ python3 26.py
List:  [1, 2, 3, 4]
HvDesai converted into list : ['H', 'v', 'D', 'e', 's', 'a', 'i']
Length of the list: 7
Type of the list: <class 'list'>
Sahil
['Amit', 'Tejas', 'Sahil', 'Yash', 'Avi']
['Amit', 'Tejas', 'Sahil', 'Yash']
['Amit', 'Tejas', 'Sam', 'Sahil', 'Yash']
['Amit', 'Tejas', 'Sahil', 'Yash']
[1, 2, 3, 4, 9]


27. Write a program to demonstrate use of set functions.
=>
# Create a Set:
thisset = {"apple", "banana", "cherry"}
print(thisset)

# Find length of the set using len() function
print(len(thisset))

# Add an item to a set, using the add() method:

thisset = {"apple", "banana", "cherry"}

thisset.add("orange")

print(thisset)

# Add elements from tropical into thisset:

thisset = {"apple", "banana", "cherry"}
tropical = {"pineapple", "mango", "papaya"}

thisset.update(tropical)

print(thisset)

# Remove "banana" by using the remove() method:

thisset = {"apple", "banana", "cherry"}

thisset.remove("banana")

print(thisset)

# Set intersection() Method

x = {"apple", "banana", "cherry"}
y = {"google", "microsoft", "apple"}

z = x.intersection(y)

print(z)

# Set union() Method
x = {"apple", "banana", "cherry"}
y = {"google", "microsoft", "apple"}

z = x.union(y)

print(z)

# Set issubset() Method

x = {"a", "b", "c"}
y = {"f", "e", "d", "c", "b", "a"}

z = x.issubset(y)

print(z)


o/p:-[exam@localhost ~]$ python3 27.py
{'banana', 'cherry', 'apple'}
3
{'banana', 'cherry', 'orange', 'apple'}
{'banana', 'cherry', 'pineapple', 'apple', 'papaya', 'mango'}
{'cherry', 'apple'}
{'apple'}
{'banana', 'google', 'cherry', 'apple', 'microsoft'}
True























28. Write a program to demonstrate use of dictionary functions.
=>
# Creating dict

thisdict = {
    "brand":"Ford",
    "model":"Mustang",
    "year":1964
}
print(thisdict)

# get length of dict using len() function
print(len(thisdict))

# Print the data type of a dictionary using type() function
print(type(thisdict))

# Using the dict() method to make a dictionary:
thisdict2 = dict(name = "John", age = 36, country = "Norway")
print(thisdict2)

# Accessing Items from dict
x = thisdict["model"]
print(x)

# Get a list of the keys using keys() method
k = thisdict.keys()
print(k)

# Get a list of the keys using values() method
v = thisdict.values()
print(v)

# Removing Items

thisdict.pop("model")
print(thisdict)

# The clear() method empties the dictionary:

thisdict.clear()
print(thisdict)

# Loop Through a Dictionary

thisdict = {
    "brand":"Ford",
    "model":"Mustang",
    "year":1964
}
for key,value in thisdict.items():
    print(f"Key: {key}, value: {value}")

# Make a copy of a dictionary with the copy() method

copy_dict = thisdict.copy()
print(copy_dict)

# Update the dict using update() method

car = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}

car.update({"color": "White"})

print(car)


o/p:-[exam@localhost ~]$ python3 28.py
{'brand': 'Ford', 'model': 'Mustang', 'year': 1964}
3
<class 'dict'>
{'name': 'John', 'age': 36, 'country': 'Norway'}
Mustang
dict_keys(['brand', 'model', 'year'])
dict_values(['Ford', 'Mustang', 1964])
{'brand': 'Ford', 'year': 1964}
{}
Key: brand, value: Ford
Key: model, value: Mustang
Key: year, value: 1964
{'brand': 'Ford', 'model': 'Mustang', 'year': 1964}
{'brand': 'Ford', 'model': 'Mustang', 'year': 1964, 'color': 'White'}






29.  Write a program to demonstrate use of Tuple functions.
=>
# Creating a tuple

mytuple = ("apple", "banana", "cherry")
print(mytuple)
# Creating a tuple using tuple() 
l = [1,2,3,4]
mytuple = tuple(l)
print(mytuple)

# Print the number of items in the tuple
thistuple = ("apple", "banana", "cherry")
print(len(thistuple))

# Print the type of the tuple
mytuple = ("apple", "banana", "cherry")
print(type(mytuple))

# Access Tuple Items
thistuple = ("apple", "banana", "cherry")
print(thistuple[1])

# Unpack Tuples
fruits = ("apple", "banana", "cherry")

(green, yellow, red) = fruits

print(green)
print(yellow)
print(red)

# Using Asterisk *

fruits = ("apple", "banana", "cherry", "strawberry", "raspberry")

(first, second, *other) = fruits

print(first)
print(second)
print(other)

# Tuple count() Method 
# Returns the number of times a specified value occurs in a tuple
thistuple = (1, 3, 7, 8, 7, 5, 4, 6, 8, 5)

x = thistuple.count(5)

print(x)

# Tuple index() Method
# Search for the first occurrence of the value , and return its position
thistuple = (1, 3, 7, 8, 7, 5, 4, 6, 8, 5)

x = thistuple.index(8)

print(x)


o/p:-[exam@localhost ~]$ python3 29.py
('apple', 'banana', 'cherry')
(1, 2, 3, 4)
3
<class 'tuple'>
banana
apple
banana
cherry
apple
banana
['cherry', 'strawberry', 'raspberry']
2
3


.

















30.  Write a program to demonstrate use of string functions.
=>
name = "Tejas"
print(name)

# Multiline Strings
sentence = """Hiii,
    My name is Tejas
"""
print(sentence)

# String capitalize() Method
txt = "python is FUN!"
x = txt.capitalize()
print(x)

# String count() Method
txt = "I love apples, apple are my favorite fruit"
x = txt.count("apple")
print(x)

# String isdigit() Method
txt = "50800"
x = txt.isdigit()
print(x)

# String istitle() Method
txt = "Hello, And Welcome To My World!"
x = txt.istitle()
print(x)

# String isupper() Method
txt = "THIS IS NOW!"
x = txt.isupper()
print(x)
# String lower() Method
txt = "Hello my FRIENDS"
x = txt.lower()
print(x)
# String split() Method
txt = "welcome to the jungle"
x = txt.split()
print(x)
# String strip() Method
# Remove spaces from the string
txt = "     banana     "
x = txt.strip()
print(x)

o/p:-[exam@localhost ~]$ python3 30.py
Tejas
Hiii,
    My name is Tejas

Python is fun!
2
True
True
True
hello my friends
['welcome', 'to', 'the', 'jungle']
banana
